#
# Cookbook:: .
# Recipe:: php_agent
#
# Copyright:: 2017, The Authors, All Rights Reserved.

include_recipe 'ark'

agent = node['appdynamics']['php_agent']
controller = node['appdynamics']['controller']
http_proxy = node['appdynamics']['http_proxy']
# TODO : proxy is global not related to phpo agent
proxy = node['appdynamics']['php_agent']['proxy']

version = agent['version'] || node['appdynamics']['version']
fail 'You must specify either node[\'appdynamics\'][\'version\'] or node[\'appdynamics\'][\'dotnet_agent\'][\'version\']' unless version

package_source = agent['source']
unless package_source
  package_source = "#{node['appdynamics']['packages_site']}/php/#{version}/AppServerAgent-#{version}.zip"
end

remote_file node['appdynamics']['php_agent']['zip'] do
  source package_source
  checksum agent['checksum']
  backup false
  mode '0444'
end

ark 'phpagent' do
  url "file:///#{agent['zip']}"
  path agent['install_dir']
  owner agent['owner']
  action :put
end

directory "#{agent['install_dir']}/phpagent/conf" do
  owner agent['owner']
  group agent['group']
  mode '0700'
  recursive true
end

# This file will be used by installation script
template "#{agent['install_dir']}/phpagent/installVars" do
  source 'php/installVars.erb'
  owner agent['owner']
  group agent['group']
  mode 0600

  variables(
    :agent_install_dir => agent['install_dir'],
    :app_name => node['appdynamics']['app_name'],
    :controller_accesskey => controller['accesskey'],
    :controller_host => controller['host'],
    :controller_port => controller['port'],
    :controller_ssl => controller['ssl'],
    :controller_user => controller['user'],
    :http_proxy_host => http_proxy['host'],
    :http_proxy_password_file => http_proxy['password_file'],
    :http_proxy_port => http_proxy['port'],
    :http_proxy_user => http_proxy['user'],
    :node_name => node['appdynamics']['node_name'],
    :proxy_controller_dir => proxy['controller_dir'],
    :proxy_log_dir => proxy['log_dir'],
    :tier_name => node['appdynamics']['tier_name']
  )
end

# Run installation script
file "#{agent['install_dir']}/phpagent/runme.sh" do
  mode 0700
end
execute "#{agent['install_dir']}/phpagent/runme.sh" do
  live_stream true
end

# Create proxy controller directory
directory proxy['controller_dir'] do
  owner agent['owner']
  group agent['group']
  mode 0755
end

# Create proxy logs directory
directory proxy['log_dir'] do
  owner agent['owner']
  group agent['group']
  mode 0700
end

# TODO : handle all versions of PHP not only php-5

# Move appdynamics's PHP extension ini file to fit the Debian PHP standard
case node['platform']
when 'debian', 'ubuntu'
  # Prevent errors if apache2 is not used
  # https://gist.github.com/scalp42/7606857#gistcomment-1618630
  resource_exists = proc do |name|
    begin
      resources name
      true
    rescue Chef::Exceptions::ResourceNotFound
      false
    end
  end

  # Delete ini file generated by runme.sh
  file '/etc/php5/cli/conf.d/appdynamics_agent.ini' do
    action :delete
  end

  # Create mods-available file from ini file generated by runme.sh
  template '/etc/php5/mods-available/appdynamics_agent.ini' do
    source 'php/appdynamics_agent.ini.erb'
    owner agent['owner']
    group agent['group']
    mode 0644
    notifies :reload, 'service[apache2]' if resource_exists['service[apache2]']
  end

  # Enable appdynamics extension
  execute 'php5enmod appdynamics_agent' do
    notifies :reload, 'service[apache2]' if resource_exists['service[apache2]']
  end
end

# TODO : Create appdynamics-proxy service
# TODO : Handle JVM configuration
# https://github.com/ARAMISAUTO/com.aramisauto.platform/blob/master/provisioners/salt/srv/salt/base/appdynamics/php.sls
# bash ./runProxy -d /opt/appdynamics/appdynamics-php-agent/proxy -r /opt/appdynamics/appdynamics-php-agent/proxy /tmp/proxy.communication /opt/appdynamics/appdynamics-php-agent/logs
systemd_unit 'appdynamics-proxy.service' do
  content <<-EOT.gsub(/^\s+/, '')
  [Unit]
  Description=AppDynamics agent proxy

  [Service]
  Type=simple
  User=#{agent['owner']}
  Group=#{agent['group']}
  ExecStart=#{agent['install_dir']}/phpagent/proxy/runProxy -d #{agent['install_dir']}/phpagent/proxy -r #{agent['install_dir']}/phpagent/proxy #{agent['proxy']['controller_dir']} #{agent['proxy']['log_dir']}
  Restart=on-failure
  TimeoutSec=30

  [Install]
  WantedBy=network.target
  EOT
  action [:create, :enable, :reload_or_restart]
end